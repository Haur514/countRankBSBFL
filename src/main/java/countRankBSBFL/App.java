/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package countRankBSBFL;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.nio.file.Files;

public class App {

    private static String base = "/Users/h-yosiok/Lab/aggregateSpecSusp/spectrum/";
    private String mathNum;
    private int bugLineNum;
    private String fileName;
    private int linesThatBSBFLwinSBFL = 0;
    private String directory;

    private int lineNumFailedTestCasePassed;

    private int equal = 0;
    private int notRecognizeSBFL = 0;
    private int allLines = 0;
    private static String threshold;
    private static int weightType;
    private String[] weightFunctionName = {"Haruka","Yoshiruka","Ruka","Haru","Haka", "Yoruka","Senko","YoshiokaHaruka","functionC"};

    public static void main(String[] args) {
        weightType = Integer.parseInt(args[0]);
        threshold = args[1];
        StringBuffer buf = new StringBuffer();
        buf.append(base);
        buf.append(args[2]);
        buf.append("/");
        base = buf.toString();
        new App().invoke();
    }

    private void invoke() {
        fileInit();
        List<String> faultDataList = readFaultData();
        for (String faultData : faultDataList) {
            String[] seg = faultData.split(" ");
            mathNum = seg[0];
            bugLineNum = Integer.parseInt(seg[1]);
            fileName = seg[2];
            run();
        }
    }

    /**
     * FAILしたテストケース全体が通った行番号を，重複を許さずに数え上げる．
     * SBFLでランキングしたテキストファイルを，行ごとに分割したリストを引数に与える．
     */
    public int countLineNumFailedTestCasePassed(List<String> text){
        int lineNum = 0;
        for(String s:text){
            String[] seg = s.split(" ");
            if(!seg[2].equals("0.0")){
                lineNum++;
            }else{
                break;
            }
        }
        return lineNum;
    }

    public void run() {
        int rankSBFL,rankBSBFL,rankNonBSBFL;
        List<String> text = readTRText("SBFL");
        lineNumFailedTestCasePassed = countLineNumFailedTestCasePassed(text);
        rankSBFL = checkRank(text);
        text = readTRText("BSBFL");
        rankBSBFL = checkRank(text);
        text = readTRText("NonBSBFL");
        rankNonBSBFL = checkRank(text);
        writeToFile(rankSBFL, rankNonBSBFL, rankBSBFL);
    }


    private void fileInit() {
        FileWriter fw = null;
        PrintWriter out = null;
        try {
            String path = "./sample.txt";
            fw = new FileWriter(path, false);
            out = new PrintWriter(fw);
            out.println("filename,SBFL,NonBSBFL,BSBFL,Project,numOfLinesFailedTestPassed");
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                out.close();
            }
            if (fw != null) {
                try {
                    fw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    private void writeToFile(int rankSBFL, int rankNonBSBFL, int rankBSBFL) {
        allLines += 1;
        if(rankSBFL > rankBSBFL){
            linesThatBSBFLwinSBFL++;
        }
        if (rankSBFL == -1) {
            equal += 1;
            notRecognizeSBFL += 1;
            return;
        }

        FileWriter fw = null;
        PrintWriter out = null;
        try {
            String path = "./sample.txt";
            fw = new FileWriter(path, true);
            out = new PrintWriter(fw);
            out.print('"' + fileName + '"' + ",");
            out.print('"' + Integer.toString(rankSBFL) + '"' + ",");
            out.print('"' + Integer.toString(rankNonBSBFL) + '"' + ",");
            out.print('"' + Integer.toString(rankBSBFL) + '"' + ",");
            out.print('"' + mathNum + '"' + ",");
            out.println('"' + Integer.toString(lineNumFailedTestCasePassed) + '"');
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                out.close();
            }
            if (fw != null) {
                try {
                    fw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void writeFile(int all, int rec, int equal) {
        FileWriter fw = null;
        PrintWriter out = null;
        try {
            String path = "./sample.txt";
            fw = new FileWriter(path, true);
            out = new PrintWriter(fw);
            out.println(all + " " + rec + " " + equal);
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                out.close();
            }
            if (fw != null) {
                try {
                    fw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private int checkRank(List<String> text) {
        for (int i = 0; i < text.size(); i++) {
            String line = text.get(i);
            String[] segment = line.split(" ");
            if(segment[2].equals("NaN")){
                System.err.println("NaN");
                System.out.println(mathNum);
                System.exit(1);
            }
            if(segment[2].equals("0.0")){
                return -1;
            }
            int num = Integer.parseInt(segment[0]);
            if (bugLineNum == num) {
                if (segment[1].contains(fileName)) {
                    double susp = Double.parseDouble(segment[2]);
                    for(int j = i; j < text.size();j++){
                        String l = text.get(j);
                        String[] s = l.split(" ");
                        if(susp != Double.parseDouble(s[2])){
                            return j;
                        }
                    }
                    return text.size();
                }
            }
        }
        return -1;
    }

    private List<String> readTRText(String fileName) {
        Path file;
        if(fileName.equals("SBFL")){
            file = Paths.get(base + mathNum + "/" + weightFunctionName[weightType] + "/SBFL.txt");
        }else{
            file = Paths.get(base + mathNum + "/" + weightFunctionName[weightType] + "/"+fileName+threshold+".txt");
        }
        List<String> text;
        try {
            text = Files.readAllLines(file);
        } catch (IOException e) {
            text = null;
            e.printStackTrace();
        }
        if (text.isEmpty()) {
            System.out.println("There is no data in " + base + mathNum + "/" + fileName);
        }
        return text;
    }

    private List<String> readFaultData() {
        Path file = Paths.get("./faultData.txt");
        List<String> text;
        try {
            text = Files.readAllLines(file);
        } catch (IOException e) {
            text = null;
            e.printStackTrace();
        }
        if (text.isEmpty()) {
            System.out.println("There is no data in faultData");
        }
        return text;
    }
}
